#include <iostream>
#include <string>
#include <vector>
using namespace std;

class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool insertWord(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        // Recursive call
        return insertWord(child, word.substr(1));
    }

    void insertWord(string word) {
        if (insertWord(root, word)) {
            this->count++;
        }
    }
    bool helper(TrieNode *root, string word) {
      if (word.length() == 0) {
      //  if (root->isTerminal == true)
          return true;
      // else
        //  return false;
      }
      int index = word[0] - 'a';
      TrieNode *child;
      if (root->children[index] != NULL) {
        child = root->children[index];
        return helper(child, word.substr(1));
      }
      return false;
    }
    bool patternhelper(vector<string> vect,string pattern , TrieNode * root)
    {
        int size1=vect.size();
       // int size2=pattern.size();  
        for(int i=0;i<size1;i++)
        {
            string st=vect[i];
            for(int j=0;j<vect[i].size();j++)
            {
                //string st=vect[i];
             insertWord(root,st.substr(j));
            }
        }
        return helper(root,pattern);


    }

    bool patternMatching(vector<string> vect, string pattern) {
        // Write your code here
        if(vect.size()==0)
        {
            return false;
        }
        if(pattern.size()==0)
        {
            return true;
        }
        return patternhelper(vect,pattern,root);
        
    }
};
