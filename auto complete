#include  <iostream>
#include <vector>
#include <string>
using namespace std;
class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool insertWord(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;

        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        // Recursive call
        return insertWord(child, word.substr(1));
    }

    void insertWord(string word) {
        if (insertWord(root, word)) {
            this->count++;
        }
    }
    bool helper(TrieNode *root, string word) {
      if (word.length() == 0) {
        //  if (root->isTerminal == true)
        return true;
        // else
        //  return false;
      }
      int index = word[0] - 'a';
      TrieNode *child;
      if (root->children[index] != NULL) {
        child = root->children[index];
        return helper(child, word.substr(1));
      }
      return false;
    }
    void helperauto(TrieNode*root,string s)
    {
        if(root->isTerminal==true)
        {
            cout<<s<<endl;
        }
        for(int i=0;i<26;i++)
        {
            if(root->children[i]!=NULL)
            {
                char c=i+'a';
                helperauto(root->children[i],  s+c);
            }
        }
        return;

    }
   void autoComplete(vector<string> input, string pattern) {
     // Write your code here
     for(int i=0;i<input.size();i++)
     {
         insertWord(root,input[i]);
     }
     if(helper(root, pattern)==false)
     {
         return;
     }
     string s=pattern;
     while(pattern.size()!=0)
     {
         root=root->children[pattern[0]-'a'];
         pattern=pattern.substr(1);
     }
     helperauto(root,s);
     

   }
};
